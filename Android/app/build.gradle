import groovy.json.*
import org.json.*
import com.google.gson.*;

apply plugin: "com.android.application"

def app_name = "Kartei"

android {
    compileSdk 32
    defaultConfig {
        applicationId "com.dergoogler.kartei"
        minSdk 26
        targetSdk 32
        versionName '1.0.4'
        versionCode 104
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        storeFile {
            //storeFile file("./keystore/upload_keystore.jks")
            //storePassword "<password>"
            //keyAlias "<alias>"
            //keyPassword "<password>"

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            resValue "string", "app_name", "${app_name}"
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            multiDexEnabled true
        }
        debug {
            resValue "string", "app_name", "${app_name} Debug"
            jniDebuggable true
            renderscriptDebuggable true
            minifyEnabled false
            multiDexEnabled false
            applicationIdSuffix ".debug"
            buildConfigField "String", "BASE_URL", "\"leer\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        jniLibs {
            keepDebugSymbols += ["*/armeabi/*.so", "*/armeabi-v7a/*.so", "*/arm64-v8a/*.so", "*/mips/*.so", "*/mips64/*.so", "*/x86/*.so", "*/x86_64/*.so"]
        }
        resources {
            excludes += ["META-INF/DEPENDENCIES.txt", "META-INF/DEPENDENCIES", "META-INF/LICENSE", "META-INF/LICENSE.txt", "META-INF/MANIFEST.MF", "META-INF/NOTICE", "META-INF/NOTICE.txt", "META-INF/ASL2.0"]
        }
    }
    sourceSets {
        main {
            res.srcDirs = ["src/main/res"]
            assets.srcDirs = ["src/main/assets"]
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
    }
}

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    implementation "androidx.browser:browser:1.4.0"
    implementation "androidx.appcompat:appcompat:1.5.1"
    implementation "androidx.exifinterface:exifinterface:1.3.3"
    implementation "androidx.multidex:multidex:2.0.1"
    // implementation "com.google.android.material:material:1.6.0"
}

configurations.implementation.setCanBeResolved(true)

task printDepsTreeInJson {
    doLast {
        configurations.implementation.incoming.getResolutionResult().getAllDependencies().each { depResult ->
            println "{\"from\":\"" + depResult.getFrom() + "\"," + "\"requested\":\"" + depResult.getRequested() + "\"}"
        }
    }
}

task printSolvedDepsTreeInJson {
    doLast {
        def jsonOutput = "["
        configurations.implementation.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
            def addToJson
            addToJson = { resolvedDep ->
                jsonOutput += "\n{"
                jsonOutput += "\"name\":\"${resolvedDep.module.id.group}:${resolvedDep.module.id.name}\","
                jsonOutput += "\"description\":\"${resolvedDep.module.id}\","
                jsonOutput += "\"version\":\"${resolvedDep.module.id.version}\","
                jsonOutput += "\"license\":\"null\","
                jsonOutput += "\"author\":\"null\","
                jsonOutput += "\"repository\":\"https://mvnrepository.com/artifact/${resolvedDep.module.id.group}/${resolvedDep.module.id.name}/${resolvedDep.module.id.version}\""
                jsonOutput += "},"
            }
            addToJson(dep)
        }
        if (jsonOutput[-1] == ",") {
            jsonOutput = jsonOutput[0..-2]
        }
        jsonOutput += "]"

        // This took me more than two hours to make -_-
        def jsonFile = new JsonSlurper().parseText(jsonOutput)
        def json = JsonOutput.toJson(jsonFile)
        def pretty = JsonOutput.prettyPrint(json)
        def myFile = new File("./../Website/src/util/native-dep.json")
        myFile.write(pretty)
    }
}
